// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.RobotContainer;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.ctre.phoenix.sensors.PigeonIMU;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX leftback;
private WPI_TalonSRX leftfront;
private MotorControllerGroup left;
private WPI_TalonSRX rightfront;
private WPI_TalonSRX rightback;
private MotorControllerGroup right;
private DifferentialDrive differentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// Test not used     private final PigeonIMU m_pigeon = new PigeonIMU(20);  // can ID not set.
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftback = new WPI_TalonSRX(4);
 
 

leftfront = new WPI_TalonSRX(5);
 
 

left = new MotorControllerGroup(leftback, leftfront  );
 addChild("left",left);
 

rightfront = new WPI_TalonSRX(6);
 
 

rightback = new WPI_TalonSRX(7);
 
 

right = new MotorControllerGroup(rightfront, rightback  );
 addChild("right",right);
 

differentialDrive = new DifferentialDrive(left, right);
 addChild("Differential Drive",differentialDrive);
 differentialDrive.setSafetyEnabled(true);
differentialDrive.setExpiration(0.1);
differentialDrive.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    right.setInverted(true);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands

    public void drive(double fwd, double turn) {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("Drive", fwd);
        SmartDashboard.putNumber("Turn", turn);
        // use squared drive to reduce effect of small joystick motions
        differentialDrive.arcadeDrive(fwd, -turn, true);
    }

    // test implement using pigeon gyro  Not used
    // public void setGyroscope(double angleOffset) {
    //     m_pigeon.setFusedHeading(angleOffset); // value is supposed to by 1/64 degree units
    // }

    // public double getGyroscopAngle() {
    //     return m_pigeon.getFusedHeading();
    // }
    

}

